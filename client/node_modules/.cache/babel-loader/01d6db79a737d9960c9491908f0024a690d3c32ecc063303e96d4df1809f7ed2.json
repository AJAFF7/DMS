{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Pie, Radar, Line } from 'react-chartjs-2';\n\n// const API_KEY = '7ad9b1ba5a76bad365b642b56a1af781';\n// const CITIES = ['Erbil', 'Sulaymaniyah', 'Amsterdam', 'Moscow', 'Alaska', 'New York', 'London'];\n// const INTERVAL_TIME = 1500;\n\n// const Weather = () => {\n//   const [weatherData, setWeatherData] = useState({});\n//   const [coolestPlaceData, setCoolestPlaceData] = useState(null);\n//   const [chartData, setChartData] = useState({\n//     labels: ['Temperature'],\n//     datasets: [],\n//   });\n//   const [error, setError] = useState(null);\n//   const [currentIndex, setCurrentIndex] = useState(0);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await axios.get(\n//           `https://api.openweathermap.org/data/2.5/weather?q=${CITIES[currentIndex]}&appid=${API_KEY}&units=metric`\n//         );\n//         const data = response.data;\n//         setWeatherData((prevData) => ({\n//           ...prevData,\n//           [CITIES[currentIndex]]: data,\n//         }));\n//         setError(null);\n//         updateCoolestPlace(data);\n//         updateChartData(data);\n//       } catch (error) {\n//         console.error('Error fetching data: ', error);\n//         setError('Failed to fetch weather data. Please try again.');\n//       }\n//     };\n\n//     fetchData();\n\n//     const interval = setInterval(() => {\n//       setCurrentIndex((prevIndex) => (prevIndex + 1) % CITIES.length);\n//     }, INTERVAL_TIME);\n\n//     return () => clearInterval(interval);\n//   }, [currentIndex]);\n\n//   const updateCoolestPlace = (data) => {\n//     if (!coolestPlaceData || (data && data.main.temp < coolestPlaceData.main.temp)) {\n//       setCoolestPlaceData(data);\n//     }\n//   };\n\n//   const updateChartData = (data) => {\n//     const city = CITIES[currentIndex];\n//     if (data) {\n//       const newDataset = {\n//         label: `Temperature in ${city} (°C)`,\n//         fill: true,\n//         lineTension: 1.5,\n//         backgroundColor: 'orangered',\n//         borderColor: 'black',\n//         borderWidth: 1,\n//         data: [data.main.temp],\n//         pointRadius: 3,\n//         pointBackgroundColor: 'rgba(75,192,192,1)',\n//         pointBorderColor: 'rgba(75,192,192)',\n//       };\n//       setChartData((prevChartData) => ({\n//         labels: prevChartData.labels,\n//         datasets: [...prevChartData.datasets, newDataset],\n//       }));\n//     }\n//   };\n\n//   return (\n//     <div className=\"weather-container\">\n//       {error ? (\n//         <p>{error}</p>\n//       ) : (\n//         <div className=\"weather-info\">\n//           <div className=\"coolest-place\">\n//             <h3>Coolest Place</h3>\n//             {coolestPlaceData && (\n//               <h4>\n//                 {coolestPlaceData.name}, {coolestPlaceData.main.temp}°C\n//               </h4>\n//             )}\n//           </div>\n//           <div className=\"chart-container\">\n//             <Pie\n//               data={chartData}\n//               options={{\n//                 maintainAspectRatio: false,\n//                 scales: {\n//                   y: {\n//                     beginAtZero: true,\n//                   },\n//                 },\n//               }}\n//             />\n//           </div>\n//           <div className=\"city-weather\">\n//             <h3> {CITIES[currentIndex]}</h3>\n//             {weatherData[CITIES[currentIndex]] && (\n//               <table className=\"weather-table\">\n//                 <tbody>\n//                   <tr>\n//                     <td>Temperature</td>\n//                     <td>{weatherData[CITIES[currentIndex]].main.temp}°C</td>\n//                   </tr>\n//                   <tr>\n//                     <td>Description</td>\n//                     <td>{weatherData[CITIES[currentIndex]].weather[0].description}</td>\n//                   </tr>\n//                   <tr>\n//                     <td>Humidity</td>\n//                     <td>{weatherData[CITIES[currentIndex]].main.humidity}%</td>\n//                   </tr>\n//                   <tr>\n//                     <td>Wind Speed</td>\n//                     <td>{weatherData[CITIES[currentIndex]].wind.speed} m/s</td>\n//                   </tr>\n//                 </tbody>\n//               </table>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Weather;","map":{"version":3,"names":[],"sources":["/Users/macbookair/Desktop/All/DMS/client/src/Personal-1/Weather.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Pie, Radar, Line } from 'react-chartjs-2';\n\n// const API_KEY = '7ad9b1ba5a76bad365b642b56a1af781';\n// const CITIES = ['Erbil', 'Sulaymaniyah', 'Amsterdam', 'Moscow', 'Alaska', 'New York', 'London'];\n// const INTERVAL_TIME = 1500;\n\n// const Weather = () => {\n//   const [weatherData, setWeatherData] = useState({});\n//   const [coolestPlaceData, setCoolestPlaceData] = useState(null);\n//   const [chartData, setChartData] = useState({\n//     labels: ['Temperature'],\n//     datasets: [],\n//   });\n//   const [error, setError] = useState(null);\n//   const [currentIndex, setCurrentIndex] = useState(0);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await axios.get(\n//           `https://api.openweathermap.org/data/2.5/weather?q=${CITIES[currentIndex]}&appid=${API_KEY}&units=metric`\n//         );\n//         const data = response.data;\n//         setWeatherData((prevData) => ({\n//           ...prevData,\n//           [CITIES[currentIndex]]: data,\n//         }));\n//         setError(null);\n//         updateCoolestPlace(data);\n//         updateChartData(data);\n//       } catch (error) {\n//         console.error('Error fetching data: ', error);\n//         setError('Failed to fetch weather data. Please try again.');\n//       }\n//     };\n\n//     fetchData();\n\n//     const interval = setInterval(() => {\n//       setCurrentIndex((prevIndex) => (prevIndex + 1) % CITIES.length);\n//     }, INTERVAL_TIME);\n\n//     return () => clearInterval(interval);\n//   }, [currentIndex]);\n\n//   const updateCoolestPlace = (data) => {\n//     if (!coolestPlaceData || (data && data.main.temp < coolestPlaceData.main.temp)) {\n//       setCoolestPlaceData(data);\n//     }\n//   };\n\n//   const updateChartData = (data) => {\n//     const city = CITIES[currentIndex];\n//     if (data) {\n//       const newDataset = {\n//         label: `Temperature in ${city} (°C)`,\n//         fill: true,\n//         lineTension: 1.5,\n//         backgroundColor: 'orangered',\n//         borderColor: 'black',\n//         borderWidth: 1,\n//         data: [data.main.temp],\n//         pointRadius: 3,\n//         pointBackgroundColor: 'rgba(75,192,192,1)',\n//         pointBorderColor: 'rgba(75,192,192)',\n//       };\n//       setChartData((prevChartData) => ({\n//         labels: prevChartData.labels,\n//         datasets: [...prevChartData.datasets, newDataset],\n//       }));\n//     }\n//   };\n\n//   return (\n//     <div className=\"weather-container\">\n//       {error ? (\n//         <p>{error}</p>\n//       ) : (\n//         <div className=\"weather-info\">\n//           <div className=\"coolest-place\">\n//             <h3>Coolest Place</h3>\n//             {coolestPlaceData && (\n//               <h4>\n//                 {coolestPlaceData.name}, {coolestPlaceData.main.temp}°C\n//               </h4>\n//             )}\n//           </div>\n//           <div className=\"chart-container\">\n//             <Pie\n//               data={chartData}\n//               options={{\n//                 maintainAspectRatio: false,\n//                 scales: {\n//                   y: {\n//                     beginAtZero: true,\n//                   },\n//                 },\n//               }}\n//             />\n//           </div>\n//           <div className=\"city-weather\">\n//             <h3> {CITIES[currentIndex]}</h3>\n//             {weatherData[CITIES[currentIndex]] && (\n//               <table className=\"weather-table\">\n//                 <tbody>\n//                   <tr>\n//                     <td>Temperature</td>\n//                     <td>{weatherData[CITIES[currentIndex]].main.temp}°C</td>\n//                   </tr>\n//                   <tr>\n//                     <td>Description</td>\n//                     <td>{weatherData[CITIES[currentIndex]].weather[0].description}</td>\n//                   </tr>\n//                   <tr>\n//                     <td>Humidity</td>\n//                     <td>{weatherData[CITIES[currentIndex]].main.humidity}%</td>\n//                   </tr>\n//                   <tr>\n//                     <td>Wind Speed</td>\n//                     <td>{weatherData[CITIES[currentIndex]].wind.speed} m/s</td>\n//                   </tr>\n//                 </tbody>\n//               </table>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Weather;\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}