{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { useNavigate, Link } from \"react-router-dom\";\n// import BackButton from \"./Backbutton\";\n// import DeletePersonal from \"./delettions\";\n// import home from \"../assets/home.jpg\";\n// import print from \"../assets/print.png\";\n// const DFP1 = () => {\n//   const [data, setData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [updateId, setUpdateId] = useState(null);\n//   const [updateData, setUpdateData] = useState({\n//     quantity: \"\",\n//     price: \"\",\n//     dameg: \"\",\n//     timestamp: \"\",\n//   });\n//   const [searchQuery, setSearchQuery] = useState(\"\"); // State to hold search query\n//   const navigate = useNavigate();\n//   useEffect(() => {\n//     if (!localStorage.getItem(\"userID\")) {\n//       navigate(\"/\");\n//     }\n//   }, [navigate]);\n//   useEffect(() => {\n//     fetchData();\n//   }, []); // Fetch data on mount\n//   const fetchData = async () => {\n//     try {\n//       const response = await fetch(\"/auth/personal1\", {\n//         method: \"GET\",\n//       });\n//       if (response.ok) {\n//         const responseData = await response.json();\n//         setData(responseData.data);\n//         setLoading(false);\n//       } else {\n//         console.error(\"Error fetching data:\", response.statusText);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n//   const handlePrint = () => {\n//     window.print();\n//   };\n//   const goTo = () => {\n//     navigate(\"/Fetchalldata1\");\n//   };\n//   const handleUpdate = (id) => {\n//     setUpdateId(id);\n//     const selectedItem = data.find((item) => item._id === id);\n//     setUpdateData({\n//       quantity: selectedItem.quantity,\n//       price: selectedItem.price,\n//       dameg: selectedItem.dameg,\n//       timestamp: selectedItem.timestamp,\n//     });\n//   };\n//   const cancelUpdate = () => {\n//     setUpdateId(null);\n//     setUpdateData({\n//       quantity: \"\",\n//       price: \"\",\n//       dameg: \"\",\n//       timestamp: \"\",\n//     });\n//   };\n//   const updatePersonalItem = async () => {\n//     try {\n//       const response = await fetch(`/auth/personal1/${updateId}`, {\n//         method: \"PATCH\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(updateData),\n//       });\n//       if (response.ok) {\n//         // Refresh data after updating\n//         fetchData();\n//         // Reset update state\n//         cancelUpdate();\n//       } else {\n//         console.error(\"Error updating data:\", response.statusText);\n//       }\n//     } catch (error) {\n//       console.error(\"Error updating data:\", error);\n//     }\n//   };\n//   //Filter data based on search query\n//   const filteredData = data.filter((item) => {\n//     // Check if the search query is a valid date\n//     const searchDate = new Date(searchQuery);\n//     if (!isNaN(searchDate.getTime())) {\n//       const itemDate = new Date(item.timestamp);\n//       // Compare item's timestamp with search date\n//       return itemDate.toDateString() === searchDate.toDateString();\n//     }\n//     // If the search query is not a valid date, perform regular string search\n//     return Object.values(item).some(\n//       (value) =>\n//         typeof value === \"string\" &&\n//         value.toLowerCase().includes(searchQuery.toLowerCase()),\n//     );\n//   });\n//   return (\n//     <div>\n//       <ul>\n//         <nav className=\"navbar\">\n//           <Link to=\"/home1\">\n//             <b>\n//               <img\n//                 className=\"nav-home\"\n//                 src={home}\n//                 height=\"25\"\n//                 width=\"25\"\n//                 alt=\"Home\"\n//               />\n//             </b>\n//           </Link>\n//           <Link to=\"/dfp1\" className=\"nav-item\">\n//             <b>Data</b>\n//           </Link>\n//           <Link to=\"/fetchalldata1\" className=\"nav-item\">\n//             <b>Total</b>\n//           </Link>\n//           <Link to=\"/dfp1\" className=\"\">\n//             <button className=\"print\" onClick={handlePrint}>\n//               <img\n//                 className=\"nav-logout\"\n//                 src={print}\n//                 height=\"28\"\n//                 width=\"28\"\n//                 alt=\"logout\"\n//               />\n//             </button>\n//           </Link>\n//         </nav>\n//       </ul>\n//       <p>\n//         <h1 className=\"patched-data\">Patched Data</h1>\n//       </p>\n//       <div className=\"search-input\" style={{ position: \"relative\" }}>\n//         <input\n//           className=\"search-field\"\n//           type=\"text\"\n//           placeholder=\"Search...\"\n//           value={searchQuery}\n//           onChange={(e) => setSearchQuery(e.target.value)}\n//           style={{ paddingRight: \"30px\" }} // Adjust padding if needed\n//         />\n//         <svg\n//           xmlns=\"http://www.w3.org/2000/svg\"\n//           width=\"26\"\n//           height=\"26\"\n//           fill=\"currentColor\"\n//           className=\"bi bi-search\"\n//           viewBox=\"0 0 16 16\"\n//           style={{\n//             position: \"absolute\",\n//             right: \"10px\",\n//             top: \"50%\",\n//             transform: \"translateY(-50%)\",\n//           }}\n//         >\n//           <path d=\"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0\" />\n//         </svg>\n//       </div>\n//       {loading ? (\n//         <p className=\"server-m\">\n//           Server is not running .... <p className=\"loading-ani-server\"></p>\n//         </p>\n//       ) : (\n//         <div className=\"data-container-dfp\">\n//           <DeletePersonal />\n//           {/* <h1 className=\"totl-data\">Patched Data:</h1> */}\n//           {filteredData.length > 0 ? (\n//             <table className=\"data-table\">\n//               <thead>\n//                 <tr>\n//                   <th>ID</th>\n//                   <th>pername</th>\n//                   <th>quantity</th>\n//                   <th>price</th>\n//                   <th>dameg</th>\n//                   <th>Timestamp</th>\n//                   <th>Actions</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {filteredData.map((i) => (\n//                   <tr key={i._id}>\n//                     <td>{i._id}</td>\n//                     <td>{i.pername}</td>\n//                     <td>\n//                       {updateId === i._id ? (\n//                         <input\n//                           type=\"text\"\n//                           placeholder={i.quantity}\n//                           value={updateData.quantity}\n//                           onChange={(e) =>\n//                             setUpdateData({\n//                               ...updateData,\n//                               quantity: e.target.value,\n//                             })\n//                           }\n//                         />\n//                       ) : (\n//                         i.quantity\n//                       )}\n//                     </td>\n//                     <td>\n//                       {updateId === i._id ? (\n//                         <input\n//                           type=\"text\"\n//                           placeholder={i.price}\n//                           value={updateData.price}\n//                           onChange={(e) =>\n//                             setUpdateData({\n//                               ...updateData,\n//                               price: e.target.value,\n//                             })\n//                           }\n//                         />\n//                       ) : (\n//                         i.price\n//                       )}\n//                     </td>\n//                     <td>\n//                       {updateId === i._id ? (\n//                         <input\n//                           type=\"text\"\n//                           placeholder={i.dameg}\n//                           value={updateData.dameg}\n//                           onChange={(e) =>\n//                             setUpdateData({\n//                               ...updateData,\n//                               dameg: e.target.value,\n//                             })\n//                           }\n//                         />\n//                       ) : (\n//                         i.dameg\n//                       )}\n//                     </td>\n//                     <td>\n//                       {updateId === i._id ? (\n//                         <input\n//                           type=\"text\"\n//                           placeholder={i.timestamp}\n//                           value={updateData.timestamp}\n//                           onChange={(e) =>\n//                             setUpdateData({\n//                               ...updateData,\n//                               timestamp: e.target.value,\n//                             })\n//                           }\n//                         />\n//                       ) : (\n//                         i.timestamp\n//                       )}\n//                     </td>\n//                     <td>\n//                       {updateId === i._id ? (\n//                         <>\n//                           <button\n//                             className=\"update-ch1\"\n//                             onClick={updatePersonalItem}\n//                           >\n//                             Save\n//                           </button>\n//                           <button className=\"update-ch2\" onClick={cancelUpdate}>\n//                             Cancel\n//                           </button>\n//                         </>\n//                       ) : (\n//                         <button\n//                           className=\"update\"\n//                           onClick={() => handleUpdate(i._id)}\n//                         >\n//                           Update\n//                         </button>\n//                       )}\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           ) : (\n//             <p>No data available</p>\n//           )}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n// export default DFP1;\n//////////////////////////\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate, Link } from \"react-router-dom\";\n// import BackButton from \"./Backbutton\";\n// import DeletePersonal from \"./delettions\";\n// import home from \"../assets/home.jpg\";\n// import print from \"../assets/print.png\";\n// const DFP1 = () => {\n//   const [data, setData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [updateId, setUpdateId] = useState(null);\n//   const [updateData, setUpdateData] = useState({\n//     quantity: \"\",\n//     price: \"\",\n//     dameg: \"\",\n//     timestamp: \"\",\n//   });\n//   const [searchQuery, setSearchQuery] = useState(\"\"); // State to hold search query\n//   const navigate = useNavigate();\n//   useEffect(() => {\n//     if (!localStorage.getItem(\"userID\")) {\n//       navigate(\"/\");\n//     }\n//   }, [navigate]);\n//   useEffect(() => {\n//     fetchData();\n//   }, []); // Fetch data on mount\n//   const fetchData = async () => {\n//     try {\n//       const response = await fetch(\"/auth/personal1\", {\n//         method: \"GET\",\n//       });\n//       if (response.ok) {\n//         const responseData = await response.json();\n//         setData(responseData.data);\n//         setLoading(false);\n//       } else {\n//         console.error(\"Error fetching data:\", response.statusText);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n//   const handlePrint = () => {\n//     window.print();\n//   };\n//   const goTo = () => {\n//     navigate(\"/Fetchalldata1\");\n//   };\n//   const handleUpdate = (id) => {\n//     setUpdateId(id);\n//     const selectedItem = data.find((item) => item._id === id);\n//     setUpdateData({\n//       quantity: selectedItem.quantity,\n//       price: selectedItem.price,\n//       dameg: selectedItem.dameg,\n//       timestamp: selectedItem.timestamp,\n//     });\n//   };\n//   const cancelUpdate = () => {\n//     setUpdateId(null);\n//     setUpdateData({\n//       quantity: \"\",\n//       price: \"\",\n//       dameg: \"\",\n//       timestamp: \"\",\n//     });\n//   };\n//   const updatePersonalItem = async () => {\n//     try {\n//       const response = await fetch(`/auth/personal1/${updateId}`, {\n//         method: \"PATCH\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(updateData),\n//       });\n//       if (response.ok) {\n//         // Refresh data after updating\n//         fetchData();\n//         // Reset update state\n//         cancelUpdate();\n//       } else {\n//         console.error(\"Error updating data:\", response.statusText);\n//       }\n//     } catch (error) {\n//       console.error(\"Error updating data:\", error);\n//     }\n//   };\n//   // Filter data based on search query\n//   const filteredData = data.filter((item) => {\n//     // Check if the search query is a valid date\n//     const searchDate = new Date(searchQuery);\n//     if (!isNaN(searchDate.getTime())) {\n//       const itemDate = new Date(item.timestamp);\n//       // Compare item's timestamp with search date\n//       return itemDate.toDateString() === searchDate.toDateString();\n//     }\n//     // If the search query is not a valid date, perform regular string search\n//     return Object.values(item).some(\n//       (value) =>\n//         typeof value === \"string\" &&\n//         value.toLowerCase().includes(searchQuery.toLowerCase()),\n//     );\n//   });\n//   // Get the latest 90-day data from filteredData\n//   const latest90DayData = filteredData.filter((item) => {\n//     const today = new Date();\n//     const itemDate = new Date(item.timestamp);\n//     const timeDiff = Math.abs(today - itemDate);\n//     const daysDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));\n//     return daysDiff <= 90;\n//   });\n//   return (\n//     <div>\n//       <ul>\n//         <nav className=\"navbar\">\n//           <Link to=\"/home1\">\n//             <b>\n//               <img\n//                 className=\"nav-home\"\n//                 src={home}\n//                 height=\"25\"\n//                 width=\"25\"\n//                 alt=\"Home\"\n//               />\n//             </b>\n//           </Link>\n//           <Link to=\"/dfp1\" className=\"nav-item\">\n//             <b>Data</b>\n//           </Link>\n//           <Link to=\"/fetchalldata1\" className=\"nav-item\">\n//             <b>Total</b>\n//           </Link>\n//           <Link to=\"/dfp1\" className=\"\">\n//             <button className=\"print\" onClick={handlePrint}>\n//               <img\n//                 className=\"nav-logout\"\n//                 src={print}\n//                 height=\"28\"\n//                 width=\"28\"\n//                 alt=\"logout\"\n//               />\n//             </button>\n//           </Link>\n//         </nav>\n//       </ul>\n//       <p>\n//         <h1 className=\"patched-data\">Patched Data</h1>\n//       </p>\n//       <div className=\"search-input\" style={{ position: \"relative\" }}>\n//         <input\n//           className=\"search-field\"\n//           type=\"text\"\n//           placeholder=\"Search...\"\n//           value={searchQuery}\n//           onChange={(e) => setSearchQuery(e.target.value)}\n//           style={{ paddingRight: \"30px\" }}\n//         />\n//         <svg\n//           xmlns=\"http://www.w3.org/2000/svg\"\n//           width=\"26\"\n//           height=\"26\"\n//           fill=\"currentColor\"\n//           className=\"bi bi-search\"\n//           viewBox=\"0 0 16 16\"\n//           style={{\n//             position: \"absolute\",\n//             right: \"10px\",\n//             top: \"50%\",\n//             transform: \"translateY(-50%)\",\n//           }}\n//         >\n//           <path d=\"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0\" />\n//         </svg>\n//       </div>\n//       {loading ? (\n//         <p className=\"server-m\">\n//           Server is not running .... <p className=\"loading-ani-server\"></p>\n//         </p>\n//       ) : (\n//         <div className=\"data-container-dfp\">\n//           <DeletePersonal />\n//           {latest90DayData.length > 0 ? (\n//             <table className=\"data-table\">\n//               <thead>\n//                 <tr>\n//                   <th>ID</th>\n//                   <th>pername</th>\n//                   <th>quantity</th>\n//                   <th>price</th>\n//                   <th>dameg</th>\n//                   <th>Timestamp</th>\n//                   <th>Actions</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {latest90DayData.map((i) => (\n//                   <tr key={i._id}>\n//                     <td>{i._id}</td>\n//                     <td>{i.pername}</td>\n//                     <td>\n//                       {updateId === i._id ? (\n//                         <input\n//                           type=\"text\"\n//                           placeholder={i.quantity}\n//                           value={updateData.quantity}\n//                           onChange={(e) =>\n//                             setUpdateData({\n//                               ...updateData,\n//                               quantity: e.target.value,\n//                             })\n//                           }\n//                         />\n//                       ) : (\n//                         i.quantity\n//                       )}\n//                     </td>\n//                     <td>\n//                       {updateId === i._id ? (\n//                         <input\n//                           type=\"text\"\n//                           placeholder={i.price}\n//                           value={updateData.price}\n//                           onChange={(e) =>\n//                             setUpdateData({\n//                               ...updateData,\n//                               price: e.target.value,\n//                             })\n//                           }\n//                         />\n//                       ) : (\n//                         i.price\n//                       )}\n//                     </td>\n//                     <td>\n//                       {updateId === i._id ? (\n//                         <input\n//                           type=\"text\"\n//                           placeholder={i.dameg}\n//                           value={updateData.dameg}\n//                           onChange={(e) =>\n//                             setUpdateData({\n//                               ...updateData,\n//                               dameg: e.target.value,\n//                             })\n//                           }\n//                         />\n//                       ) : (\n//                         i.dameg\n//                       )}\n//                     </td>\n//                     <td>\n//                       {updateId === i._id ? (\n//                         <input\n//                           type=\"text\"\n//                           placeholder={i.timestamp}\n//                           value={updateData.timestamp}\n//                           onChange={(e) =>\n//                             setUpdateData({\n//                               ...updateData,\n//                               timestamp: e.target.value,\n//                             })\n//                           }\n//                         />\n//                       ) : (\n//                         i.timestamp\n//                       )}\n//                     </td>\n//                     <td>\n//                       {updateId === i._id ? (\n//                         <>\n//                           <button\n//                             className=\"update-ch1\"\n//                             onClick={updatePersonalItem}\n//                           >\n//                             Save\n//                           </button>\n//                           <button className=\"update-ch2\" onClick={cancelUpdate}>\n//                             Cancel\n//                           </button>\n//                         </>\n//                       ) : (\n//                         <button\n//                           className=\"update\"\n//                           onClick={() => handleUpdate(i._id)}\n//                         >\n//                           Update\n//                         </button>\n//                       )}\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           ) : (\n//             <p>No matching data found within the last 90 days.</p>\n//           )}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n// export default DFP1;\n////////////////////\nimport React,{useState,useEffect}from\"react\";import{useNavigate,Link}from\"react-router-dom\";import BackButton from\"./Backbutton\";import DeletePersonal from\"./delettions\";import home from\"../assets/home.jpg\";import print from\"../assets/print.png\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const DFP1=()=>{const[data,setData]=useState([]);const[loading,setLoading]=useState(true);const[updateId,setUpdateId]=useState(null);const[updateData,setUpdateData]=useState({quantity:\"\",price:\"\",dameg:\"\",timestamp:\"\"});const[searchQuery,setSearchQuery]=useState(\"\");// State to hold search query\nconst navigate=useNavigate();useEffect(()=>{if(!localStorage.getItem(\"userID\")){navigate(\"/\");}},[navigate]);useEffect(()=>{fetchData();},[]);// Fetch data on mount\nconst fetchData=async()=>{try{const response=await fetch(\"/auth/personal1\",{method:\"GET\"});if(response.ok){const responseData=await response.json();setData(responseData.data);setLoading(false);}else{console.error(\"Error fetching data:\",response.statusText);}}catch(error){console.error(\"Error fetching data:\",error);}};const handlePrint=()=>{window.print();};const goTo=()=>{navigate(\"/Fetchalldata1\");};const handleUpdate=id=>{setUpdateId(id);const selectedItem=data.find(item=>item._id===id);setUpdateData({quantity:selectedItem.quantity,price:selectedItem.price,dameg:selectedItem.dameg,timestamp:selectedItem.timestamp});};const cancelUpdate=()=>{setUpdateId(null);setUpdateData({quantity:\"\",price:\"\",dameg:\"\",timestamp:\"\"});};const updatePersonalItem=async()=>{try{const response=await fetch(\"/auth/personal1/\".concat(updateId),{method:\"PATCH\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(updateData)});if(response.ok){// Refresh data after updating\nfetchData();// Reset update state\ncancelUpdate();}else{console.error(\"Error updating data:\",response.statusText);}}catch(error){console.error(\"Error updating data:\",error);}};//Filter data based on search query\nconst filteredData=data.filter(item=>{// Check if the search query is a valid date\nconst searchDate=new Date(searchQuery);if(!isNaN(searchDate.getTime())){const itemDate=new Date(item.timestamp);// Compare item's timestamp with search date\nreturn itemDate.toDateString()===searchDate.toDateString();}// If the search query is not a valid date, perform regular string search\nreturn Object.values(item).some(value=>typeof value===\"string\"&&value.toLowerCase().includes(searchQuery.toLowerCase()));});return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"ul\",{children:/*#__PURE__*/_jsxs(\"nav\",{className:\"navbar\",children:[/*#__PURE__*/_jsx(Link,{to:\"/home1\",children:/*#__PURE__*/_jsx(\"b\",{children:/*#__PURE__*/_jsx(\"img\",{className:\"nav-home\",src:home,height:\"25\",width:\"25\",alt:\"Home\"})})}),/*#__PURE__*/_jsx(Link,{to:\"/dfp1\",className:\"nav-item\",children:/*#__PURE__*/_jsx(\"b\",{children:\"Data\"})}),/*#__PURE__*/_jsx(Link,{to:\"/fetchalldata1\",className:\"nav-item\",children:/*#__PURE__*/_jsx(\"b\",{children:\"Total\"})}),/*#__PURE__*/_jsx(Link,{to:\"/dfp1\",className:\"\",children:/*#__PURE__*/_jsx(\"button\",{className:\"print\",onClick:handlePrint,children:/*#__PURE__*/_jsx(\"img\",{className:\"nav-logout\",src:print,height:\"28\",width:\"28\",alt:\"logout\"})})})]})}),/*#__PURE__*/_jsx(\"p\",{children:/*#__PURE__*/_jsx(\"h1\",{className:\"patched-data\",children:\"Search In DataBase\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"search-input\",style:{position:\"relative\"},children:[/*#__PURE__*/_jsx(\"input\",{className:\"search-field\",type:\"text\",placeholder:\"Search...\",value:searchQuery,onChange:e=>setSearchQuery(e.target.value),style:{paddingRight:\"30px\"}// Adjust padding if needed\n}),/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",width:\"26\",height:\"26\",fill:\"currentColor\",className:\"bi bi-search\",viewBox:\"0 0 16 16\",style:{position:\"absolute\",right:\"10px\",top:\"50%\",transform:\"translateY(-50%)\"},children:/*#__PURE__*/_jsx(\"path\",{d:\"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0\"})})]}),searchQuery&&filteredData.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"data-container-dfp\",children:[/*#__PURE__*/_jsx(DeletePersonal,{}),/*#__PURE__*/_jsxs(\"table\",{className:\"data-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"ID\"}),/*#__PURE__*/_jsx(\"th\",{children:\"pername\"}),/*#__PURE__*/_jsx(\"th\",{children:\"quantity\"}),/*#__PURE__*/_jsx(\"th\",{children:\"price\"}),/*#__PURE__*/_jsx(\"th\",{children:\"dameg\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Timestamp\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Actions\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:filteredData.map(i=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:i._id}),/*#__PURE__*/_jsx(\"td\",{children:i.pername}),/*#__PURE__*/_jsx(\"td\",{children:updateId===i._id?/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:i.quantity,value:updateData.quantity,onChange:e=>setUpdateData({...updateData,quantity:e.target.value})}):i.quantity}),/*#__PURE__*/_jsx(\"td\",{children:updateId===i._id?/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:i.price,value:updateData.price,onChange:e=>setUpdateData({...updateData,price:e.target.value})}):i.price}),/*#__PURE__*/_jsx(\"td\",{children:updateId===i._id?/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:i.dameg,value:updateData.dameg,onChange:e=>setUpdateData({...updateData,dameg:e.target.value})}):i.dameg}),/*#__PURE__*/_jsx(\"td\",{children:updateId===i._id?/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:i.timestamp,value:updateData.timestamp,onChange:e=>setUpdateData({...updateData,timestamp:e.target.value})}):i.timestamp}),/*#__PURE__*/_jsx(\"td\",{children:updateId===i._id?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"button\",{className:\"update-ch1\",onClick:updatePersonalItem,children:\"Save\"}),/*#__PURE__*/_jsx(\"button\",{className:\"update-ch2\",onClick:cancelUpdate,children:\"Cancel\"})]}):/*#__PURE__*/_jsx(\"button\",{className:\"update\",onClick:()=>handleUpdate(i._id),children:\"Update\"})})]},i._id))})]})]}),searchQuery&&filteredData.length===0&&/*#__PURE__*/_jsx(\"p\",{children:\"No data available\"}),loading&&/*#__PURE__*/_jsxs(\"p\",{className:\"server-m\",children:[\"Server is not running .... \",/*#__PURE__*/_jsx(\"p\",{className:\"loading-ani-server\"})]})]});};export default DFP1;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Link","BackButton","DeletePersonal","home","print","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","DFP1","data","setData","loading","setLoading","updateId","setUpdateId","updateData","setUpdateData","quantity","price","dameg","timestamp","searchQuery","setSearchQuery","navigate","localStorage","getItem","fetchData","response","fetch","method","ok","responseData","json","console","error","statusText","handlePrint","window","goTo","handleUpdate","id","selectedItem","find","item","_id","cancelUpdate","updatePersonalItem","concat","headers","body","JSON","stringify","filteredData","filter","searchDate","Date","isNaN","getTime","itemDate","toDateString","Object","values","some","value","toLowerCase","includes","children","className","to","src","height","width","alt","onClick","style","position","type","placeholder","onChange","e","target","paddingRight","xmlns","fill","viewBox","right","top","transform","d","length","map","i","pername"],"sources":["/Users/macbookair/Desktop/All/DMS/client/src/Personal-1/DFP1.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { useNavigate, Link } from \"react-router-dom\";\n// import BackButton from \"./Backbutton\";\n// import DeletePersonal from \"./delettions\";\n// import home from \"../assets/home.jpg\";\n// import print from \"../assets/print.png\";\n\n// const DFP1 = () => {\n//   const [data, setData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [updateId, setUpdateId] = useState(null);\n//   const [updateData, setUpdateData] = useState({\n//     quantity: \"\",\n//     price: \"\",\n//     dameg: \"\",\n//     timestamp: \"\",\n//   });\n//   const [searchQuery, setSearchQuery] = useState(\"\"); // State to hold search query\n\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     if (!localStorage.getItem(\"userID\")) {\n//       navigate(\"/\");\n//     }\n//   }, [navigate]);\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []); // Fetch data on mount\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await fetch(\"/auth/personal1\", {\n//         method: \"GET\",\n//       });\n\n//       if (response.ok) {\n//         const responseData = await response.json();\n//         setData(responseData.data);\n//         setLoading(false);\n//       } else {\n//         console.error(\"Error fetching data:\", response.statusText);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   const handlePrint = () => {\n//     window.print();\n//   };\n\n//   const goTo = () => {\n//     navigate(\"/Fetchalldata1\");\n//   };\n\n//   const handleUpdate = (id) => {\n//     setUpdateId(id);\n//     const selectedItem = data.find((item) => item._id === id);\n//     setUpdateData({\n//       quantity: selectedItem.quantity,\n//       price: selectedItem.price,\n//       dameg: selectedItem.dameg,\n//       timestamp: selectedItem.timestamp,\n//     });\n//   };\n\n//   const cancelUpdate = () => {\n//     setUpdateId(null);\n//     setUpdateData({\n//       quantity: \"\",\n//       price: \"\",\n//       dameg: \"\",\n//       timestamp: \"\",\n//     });\n//   };\n\n//   const updatePersonalItem = async () => {\n//     try {\n//       const response = await fetch(`/auth/personal1/${updateId}`, {\n//         method: \"PATCH\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(updateData),\n//       });\n\n//       if (response.ok) {\n//         // Refresh data after updating\n//         fetchData();\n\n//         // Reset update state\n//         cancelUpdate();\n//       } else {\n//         console.error(\"Error updating data:\", response.statusText);\n//       }\n//     } catch (error) {\n//       console.error(\"Error updating data:\", error);\n//     }\n//   };\n\n//   //Filter data based on search query\n//   const filteredData = data.filter((item) => {\n//     // Check if the search query is a valid date\n//     const searchDate = new Date(searchQuery);\n//     if (!isNaN(searchDate.getTime())) {\n//       const itemDate = new Date(item.timestamp);\n//       // Compare item's timestamp with search date\n//       return itemDate.toDateString() === searchDate.toDateString();\n//     }\n//     // If the search query is not a valid date, perform regular string search\n//     return Object.values(item).some(\n//       (value) =>\n//         typeof value === \"string\" &&\n//         value.toLowerCase().includes(searchQuery.toLowerCase()),\n//     );\n//   });\n\n//   return (\n//     <div>\n//       <ul>\n//         <nav className=\"navbar\">\n//           <Link to=\"/home1\">\n//             <b>\n//               <img\n//                 className=\"nav-home\"\n//                 src={home}\n//                 height=\"25\"\n//                 width=\"25\"\n//                 alt=\"Home\"\n//               />\n//             </b>\n//           </Link>\n//           <Link to=\"/dfp1\" className=\"nav-item\">\n//             <b>Data</b>\n//           </Link>\n//           <Link to=\"/fetchalldata1\" className=\"nav-item\">\n//             <b>Total</b>\n//           </Link>\n\n//           <Link to=\"/dfp1\" className=\"\">\n//             <button className=\"print\" onClick={handlePrint}>\n//               <img\n//                 className=\"nav-logout\"\n//                 src={print}\n//                 height=\"28\"\n//                 width=\"28\"\n//                 alt=\"logout\"\n//               />\n//             </button>\n//           </Link>\n//         </nav>\n//       </ul>\n\n//       <p>\n//         <h1 className=\"patched-data\">Patched Data</h1>\n//       </p>\n\n//       <div className=\"search-input\" style={{ position: \"relative\" }}>\n//         <input\n//           className=\"search-field\"\n//           type=\"text\"\n//           placeholder=\"Search...\"\n//           value={searchQuery}\n//           onChange={(e) => setSearchQuery(e.target.value)}\n//           style={{ paddingRight: \"30px\" }} // Adjust padding if needed\n//         />\n//         <svg\n//           xmlns=\"http://www.w3.org/2000/svg\"\n//           width=\"26\"\n//           height=\"26\"\n//           fill=\"currentColor\"\n//           className=\"bi bi-search\"\n//           viewBox=\"0 0 16 16\"\n//           style={{\n//             position: \"absolute\",\n//             right: \"10px\",\n//             top: \"50%\",\n//             transform: \"translateY(-50%)\",\n//           }}\n//         >\n//           <path d=\"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0\" />\n//         </svg>\n//       </div>\n\n//       {loading ? (\n//         <p className=\"server-m\">\n//           Server is not running .... <p className=\"loading-ani-server\"></p>\n//         </p>\n//       ) : (\n//         <div className=\"data-container-dfp\">\n//           <DeletePersonal />\n\n//           {/* <h1 className=\"totl-data\">Patched Data:</h1> */}\n//           {filteredData.length > 0 ? (\n//             <table className=\"data-table\">\n//               <thead>\n//                 <tr>\n//                   <th>ID</th>\n//                   <th>pername</th>\n//                   <th>quantity</th>\n//                   <th>price</th>\n//                   <th>dameg</th>\n//                   <th>Timestamp</th>\n//                   <th>Actions</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {filteredData.map((i) => (\n//                   <tr key={i._id}>\n//                     <td>{i._id}</td>\n//                     <td>{i.pername}</td>\n//                     <td>\n//                       {updateId === i._id ? (\n//                         <input\n//                           type=\"text\"\n//                           placeholder={i.quantity}\n//                           value={updateData.quantity}\n//                           onChange={(e) =>\n//                             setUpdateData({\n//                               ...updateData,\n//                               quantity: e.target.value,\n//                             })\n//                           }\n//                         />\n//                       ) : (\n//                         i.quantity\n//                       )}\n//                     </td>\n//                     <td>\n//                       {updateId === i._id ? (\n//                         <input\n//                           type=\"text\"\n//                           placeholder={i.price}\n//                           value={updateData.price}\n//                           onChange={(e) =>\n//                             setUpdateData({\n//                               ...updateData,\n//                               price: e.target.value,\n//                             })\n//                           }\n//                         />\n//                       ) : (\n//                         i.price\n//                       )}\n//                     </td>\n//                     <td>\n//                       {updateId === i._id ? (\n//                         <input\n//                           type=\"text\"\n//                           placeholder={i.dameg}\n//                           value={updateData.dameg}\n//                           onChange={(e) =>\n//                             setUpdateData({\n//                               ...updateData,\n//                               dameg: e.target.value,\n//                             })\n//                           }\n//                         />\n//                       ) : (\n//                         i.dameg\n//                       )}\n//                     </td>\n//                     <td>\n//                       {updateId === i._id ? (\n//                         <input\n//                           type=\"text\"\n//                           placeholder={i.timestamp}\n//                           value={updateData.timestamp}\n//                           onChange={(e) =>\n//                             setUpdateData({\n//                               ...updateData,\n//                               timestamp: e.target.value,\n//                             })\n//                           }\n//                         />\n//                       ) : (\n//                         i.timestamp\n//                       )}\n//                     </td>\n//                     <td>\n//                       {updateId === i._id ? (\n//                         <>\n//                           <button\n//                             className=\"update-ch1\"\n//                             onClick={updatePersonalItem}\n//                           >\n//                             Save\n//                           </button>\n//                           <button className=\"update-ch2\" onClick={cancelUpdate}>\n//                             Cancel\n//                           </button>\n//                         </>\n//                       ) : (\n//                         <button\n//                           className=\"update\"\n//                           onClick={() => handleUpdate(i._id)}\n//                         >\n//                           Update\n//                         </button>\n//                       )}\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           ) : (\n//             <p>No data available</p>\n//           )}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default DFP1;\n\n//////////////////////////\n\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate, Link } from \"react-router-dom\";\n// import BackButton from \"./Backbutton\";\n// import DeletePersonal from \"./delettions\";\n// import home from \"../assets/home.jpg\";\n// import print from \"../assets/print.png\";\n\n// const DFP1 = () => {\n//   const [data, setData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [updateId, setUpdateId] = useState(null);\n//   const [updateData, setUpdateData] = useState({\n//     quantity: \"\",\n//     price: \"\",\n//     dameg: \"\",\n//     timestamp: \"\",\n//   });\n//   const [searchQuery, setSearchQuery] = useState(\"\"); // State to hold search query\n\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     if (!localStorage.getItem(\"userID\")) {\n//       navigate(\"/\");\n//     }\n//   }, [navigate]);\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []); // Fetch data on mount\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await fetch(\"/auth/personal1\", {\n//         method: \"GET\",\n//       });\n\n//       if (response.ok) {\n//         const responseData = await response.json();\n//         setData(responseData.data);\n//         setLoading(false);\n//       } else {\n//         console.error(\"Error fetching data:\", response.statusText);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   const handlePrint = () => {\n//     window.print();\n//   };\n\n//   const goTo = () => {\n//     navigate(\"/Fetchalldata1\");\n//   };\n\n//   const handleUpdate = (id) => {\n//     setUpdateId(id);\n//     const selectedItem = data.find((item) => item._id === id);\n//     setUpdateData({\n//       quantity: selectedItem.quantity,\n//       price: selectedItem.price,\n//       dameg: selectedItem.dameg,\n//       timestamp: selectedItem.timestamp,\n//     });\n//   };\n\n//   const cancelUpdate = () => {\n//     setUpdateId(null);\n//     setUpdateData({\n//       quantity: \"\",\n//       price: \"\",\n//       dameg: \"\",\n//       timestamp: \"\",\n//     });\n//   };\n\n//   const updatePersonalItem = async () => {\n//     try {\n//       const response = await fetch(`/auth/personal1/${updateId}`, {\n//         method: \"PATCH\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(updateData),\n//       });\n\n//       if (response.ok) {\n//         // Refresh data after updating\n//         fetchData();\n\n//         // Reset update state\n//         cancelUpdate();\n//       } else {\n//         console.error(\"Error updating data:\", response.statusText);\n//       }\n//     } catch (error) {\n//       console.error(\"Error updating data:\", error);\n//     }\n//   };\n\n//   // Filter data based on search query\n//   const filteredData = data.filter((item) => {\n//     // Check if the search query is a valid date\n//     const searchDate = new Date(searchQuery);\n//     if (!isNaN(searchDate.getTime())) {\n//       const itemDate = new Date(item.timestamp);\n//       // Compare item's timestamp with search date\n//       return itemDate.toDateString() === searchDate.toDateString();\n//     }\n//     // If the search query is not a valid date, perform regular string search\n//     return Object.values(item).some(\n//       (value) =>\n//         typeof value === \"string\" &&\n//         value.toLowerCase().includes(searchQuery.toLowerCase()),\n//     );\n//   });\n\n//   // Get the latest 90-day data from filteredData\n//   const latest90DayData = filteredData.filter((item) => {\n//     const today = new Date();\n//     const itemDate = new Date(item.timestamp);\n//     const timeDiff = Math.abs(today - itemDate);\n//     const daysDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));\n//     return daysDiff <= 90;\n//   });\n\n//   return (\n//     <div>\n//       <ul>\n//         <nav className=\"navbar\">\n//           <Link to=\"/home1\">\n//             <b>\n//               <img\n//                 className=\"nav-home\"\n//                 src={home}\n//                 height=\"25\"\n//                 width=\"25\"\n//                 alt=\"Home\"\n//               />\n//             </b>\n//           </Link>\n//           <Link to=\"/dfp1\" className=\"nav-item\">\n//             <b>Data</b>\n//           </Link>\n//           <Link to=\"/fetchalldata1\" className=\"nav-item\">\n//             <b>Total</b>\n//           </Link>\n\n//           <Link to=\"/dfp1\" className=\"\">\n//             <button className=\"print\" onClick={handlePrint}>\n//               <img\n//                 className=\"nav-logout\"\n//                 src={print}\n//                 height=\"28\"\n//                 width=\"28\"\n//                 alt=\"logout\"\n//               />\n//             </button>\n//           </Link>\n//         </nav>\n//       </ul>\n\n//       <p>\n//         <h1 className=\"patched-data\">Patched Data</h1>\n//       </p>\n\n//       <div className=\"search-input\" style={{ position: \"relative\" }}>\n//         <input\n//           className=\"search-field\"\n//           type=\"text\"\n//           placeholder=\"Search...\"\n//           value={searchQuery}\n//           onChange={(e) => setSearchQuery(e.target.value)}\n//           style={{ paddingRight: \"30px\" }}\n//         />\n//         <svg\n//           xmlns=\"http://www.w3.org/2000/svg\"\n//           width=\"26\"\n//           height=\"26\"\n//           fill=\"currentColor\"\n//           className=\"bi bi-search\"\n//           viewBox=\"0 0 16 16\"\n//           style={{\n//             position: \"absolute\",\n//             right: \"10px\",\n//             top: \"50%\",\n//             transform: \"translateY(-50%)\",\n//           }}\n//         >\n//           <path d=\"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0\" />\n//         </svg>\n//       </div>\n\n//       {loading ? (\n//         <p className=\"server-m\">\n//           Server is not running .... <p className=\"loading-ani-server\"></p>\n//         </p>\n//       ) : (\n//         <div className=\"data-container-dfp\">\n//           <DeletePersonal />\n\n//           {latest90DayData.length > 0 ? (\n//             <table className=\"data-table\">\n//               <thead>\n//                 <tr>\n//                   <th>ID</th>\n//                   <th>pername</th>\n//                   <th>quantity</th>\n//                   <th>price</th>\n//                   <th>dameg</th>\n//                   <th>Timestamp</th>\n//                   <th>Actions</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {latest90DayData.map((i) => (\n//                   <tr key={i._id}>\n//                     <td>{i._id}</td>\n//                     <td>{i.pername}</td>\n//                     <td>\n//                       {updateId === i._id ? (\n//                         <input\n//                           type=\"text\"\n//                           placeholder={i.quantity}\n//                           value={updateData.quantity}\n//                           onChange={(e) =>\n//                             setUpdateData({\n//                               ...updateData,\n//                               quantity: e.target.value,\n//                             })\n//                           }\n//                         />\n//                       ) : (\n//                         i.quantity\n//                       )}\n//                     </td>\n//                     <td>\n//                       {updateId === i._id ? (\n//                         <input\n//                           type=\"text\"\n//                           placeholder={i.price}\n//                           value={updateData.price}\n//                           onChange={(e) =>\n//                             setUpdateData({\n//                               ...updateData,\n//                               price: e.target.value,\n//                             })\n//                           }\n//                         />\n//                       ) : (\n//                         i.price\n//                       )}\n//                     </td>\n//                     <td>\n//                       {updateId === i._id ? (\n//                         <input\n//                           type=\"text\"\n//                           placeholder={i.dameg}\n//                           value={updateData.dameg}\n//                           onChange={(e) =>\n//                             setUpdateData({\n//                               ...updateData,\n//                               dameg: e.target.value,\n//                             })\n//                           }\n//                         />\n//                       ) : (\n//                         i.dameg\n//                       )}\n//                     </td>\n//                     <td>\n//                       {updateId === i._id ? (\n//                         <input\n//                           type=\"text\"\n//                           placeholder={i.timestamp}\n//                           value={updateData.timestamp}\n//                           onChange={(e) =>\n//                             setUpdateData({\n//                               ...updateData,\n//                               timestamp: e.target.value,\n//                             })\n//                           }\n//                         />\n//                       ) : (\n//                         i.timestamp\n//                       )}\n//                     </td>\n//                     <td>\n//                       {updateId === i._id ? (\n//                         <>\n//                           <button\n//                             className=\"update-ch1\"\n//                             onClick={updatePersonalItem}\n//                           >\n//                             Save\n//                           </button>\n//                           <button className=\"update-ch2\" onClick={cancelUpdate}>\n//                             Cancel\n//                           </button>\n//                         </>\n//                       ) : (\n//                         <button\n//                           className=\"update\"\n//                           onClick={() => handleUpdate(i._id)}\n//                         >\n//                           Update\n//                         </button>\n//                       )}\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           ) : (\n//             <p>No matching data found within the last 90 days.</p>\n//           )}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default DFP1;\n\n////////////////////\n\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport BackButton from \"./Backbutton\";\nimport DeletePersonal from \"./delettions\";\nimport home from \"../assets/home.jpg\";\nimport print from \"../assets/print.png\";\n\nconst DFP1 = () => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [updateId, setUpdateId] = useState(null);\n  const [updateData, setUpdateData] = useState({\n    quantity: \"\",\n    price: \"\",\n    dameg: \"\",\n    timestamp: \"\",\n  });\n  const [searchQuery, setSearchQuery] = useState(\"\"); // State to hold search query\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!localStorage.getItem(\"userID\")) {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n  useEffect(() => {\n    fetchData();\n  }, []); // Fetch data on mount\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch(\"/auth/personal1\", {\n        method: \"GET\",\n      });\n\n      if (response.ok) {\n        const responseData = await response.json();\n        setData(responseData.data);\n        setLoading(false);\n      } else {\n        console.error(\"Error fetching data:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  const goTo = () => {\n    navigate(\"/Fetchalldata1\");\n  };\n\n  const handleUpdate = (id) => {\n    setUpdateId(id);\n    const selectedItem = data.find((item) => item._id === id);\n    setUpdateData({\n      quantity: selectedItem.quantity,\n      price: selectedItem.price,\n      dameg: selectedItem.dameg,\n      timestamp: selectedItem.timestamp,\n    });\n  };\n\n  const cancelUpdate = () => {\n    setUpdateId(null);\n    setUpdateData({\n      quantity: \"\",\n      price: \"\",\n      dameg: \"\",\n      timestamp: \"\",\n    });\n  };\n\n  const updatePersonalItem = async () => {\n    try {\n      const response = await fetch(`/auth/personal1/${updateId}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(updateData),\n      });\n\n      if (response.ok) {\n        // Refresh data after updating\n        fetchData();\n\n        // Reset update state\n        cancelUpdate();\n      } else {\n        console.error(\"Error updating data:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error updating data:\", error);\n    }\n  };\n\n  //Filter data based on search query\n  const filteredData = data.filter((item) => {\n    // Check if the search query is a valid date\n    const searchDate = new Date(searchQuery);\n    if (!isNaN(searchDate.getTime())) {\n      const itemDate = new Date(item.timestamp);\n      // Compare item's timestamp with search date\n      return itemDate.toDateString() === searchDate.toDateString();\n    }\n    // If the search query is not a valid date, perform regular string search\n    return Object.values(item).some(\n      (value) =>\n        typeof value === \"string\" &&\n        value.toLowerCase().includes(searchQuery.toLowerCase()),\n    );\n  });\n\n  return (\n    <div>\n      <ul>\n        <nav className=\"navbar\">\n          <Link to=\"/home1\">\n            <b>\n              <img\n                className=\"nav-home\"\n                src={home}\n                height=\"25\"\n                width=\"25\"\n                alt=\"Home\"\n              />\n            </b>\n          </Link>\n          <Link to=\"/dfp1\" className=\"nav-item\">\n            <b>Data</b>\n          </Link>\n          <Link to=\"/fetchalldata1\" className=\"nav-item\">\n            <b>Total</b>\n          </Link>\n\n          <Link to=\"/dfp1\" className=\"\">\n            <button className=\"print\" onClick={handlePrint}>\n              <img\n                className=\"nav-logout\"\n                src={print}\n                height=\"28\"\n                width=\"28\"\n                alt=\"logout\"\n              />\n            </button>\n          </Link>\n        </nav>\n      </ul>\n\n      <p>\n        <h1 className=\"patched-data\">Search In DataBase</h1>\n      </p>\n\n      <div className=\"search-input\" style={{ position: \"relative\" }}>\n        <input\n          className=\"search-field\"\n          type=\"text\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          style={{ paddingRight: \"30px\" }} // Adjust padding if needed\n        />\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"26\"\n          height=\"26\"\n          fill=\"currentColor\"\n          className=\"bi bi-search\"\n          viewBox=\"0 0 16 16\"\n          style={{\n            position: \"absolute\",\n            right: \"10px\",\n            top: \"50%\",\n            transform: \"translateY(-50%)\",\n          }}\n        >\n          <path d=\"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0\" />\n        </svg>\n      </div>\n\n      {/* Check if there's a search query and data to display */}\n      {searchQuery && filteredData.length > 0 && (\n        <div className=\"data-container-dfp\">\n          <DeletePersonal />\n\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>pername</th>\n                <th>quantity</th>\n                <th>price</th>\n                <th>dameg</th>\n                <th>Timestamp</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredData.map((i) => (\n                <tr key={i._id}>\n                  <td>{i._id}</td>\n                  <td>{i.pername}</td>\n                  <td>\n                    {updateId === i._id ? (\n                      <input\n                        type=\"text\"\n                        placeholder={i.quantity}\n                        value={updateData.quantity}\n                        onChange={(e) =>\n                          setUpdateData({\n                            ...updateData,\n                            quantity: e.target.value,\n                          })\n                        }\n                      />\n                    ) : (\n                      i.quantity\n                    )}\n                  </td>\n                  <td>\n                    {updateId === i._id ? (\n                      <input\n                        type=\"text\"\n                        placeholder={i.price}\n                        value={updateData.price}\n                        onChange={(e) =>\n                          setUpdateData({\n                            ...updateData,\n                            price: e.target.value,\n                          })\n                        }\n                      />\n                    ) : (\n                      i.price\n                    )}\n                  </td>\n                  <td>\n                    {updateId === i._id ? (\n                      <input\n                        type=\"text\"\n                        placeholder={i.dameg}\n                        value={updateData.dameg}\n                        onChange={(e) =>\n                          setUpdateData({\n                            ...updateData,\n                            dameg: e.target.value,\n                          })\n                        }\n                      />\n                    ) : (\n                      i.dameg\n                    )}\n                  </td>\n                  <td>\n                    {updateId === i._id ? (\n                      <input\n                        type=\"text\"\n                        placeholder={i.timestamp}\n                        value={updateData.timestamp}\n                        onChange={(e) =>\n                          setUpdateData({\n                            ...updateData,\n                            timestamp: e.target.value,\n                          })\n                        }\n                      />\n                    ) : (\n                      i.timestamp\n                    )}\n                  </td>\n                  <td>\n                    {updateId === i._id ? (\n                      <>\n                        <button\n                          className=\"update-ch1\"\n                          onClick={updatePersonalItem}\n                        >\n                          Save\n                        </button>\n                        <button className=\"update-ch2\" onClick={cancelUpdate}>\n                          Cancel\n                        </button>\n                      </>\n                    ) : (\n                      <button\n                        className=\"update\"\n                        onClick={() => handleUpdate(i._id)}\n                      >\n                        Update\n                      </button>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n\n      {/* Display message if no data found */}\n      {searchQuery && filteredData.length === 0 && <p>No data available</p>}\n\n      {/* Display loading message */}\n      {loading && (\n        <p className=\"server-m\">\n          Server is not running .... <p className=\"loading-ani-server\"></p>\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default DFP1;\n"],"mappingslD,OAASC,WAAW,CAAEC,IAAI,KAAQ,kBAAkB,CACpD,MAAO,CAAAC,UAAU,KAAM,cAAc,CACrC,MAAO,CAAAC,cAAc,KAAM,cAAc,CACzC,MAAO,CAAAC,IAAI,KAAM,oBAAoB,CACrC,MAAO,CAAAC,KAAK,KAAM,qBAAqB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,gCAAAC,QAAA,IAAAC,SAAA,yBAExC,KAAM,CAAAC,IAAI,CAAGA,CAAA,GAAM,CACjB,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGhB,QAAQ,CAAC,EAAE,CAAC,CACpC,KAAM,CAACiB,OAAO,CAAEC,UAAU,CAAC,CAAGlB,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACmB,QAAQ,CAAEC,WAAW,CAAC,CAAGpB,QAAQ,CAAC,IAAI,CAAC,CAC9C,KAAM,CAACqB,UAAU,CAAEC,aAAa,CAAC,CAAGtB,QAAQ,CAAC,CAC3CuB,QAAQ,CAAE,EAAE,CACZC,KAAK,CAAE,EAAE,CACTC,KAAK,CAAE,EAAE,CACTC,SAAS,CAAE,EACb,CAAC,CAAC,CACF,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAG5B,QAAQ,CAAC,EAAE,CAAC,CAAE;AAEpD,KAAM,CAAA6B,QAAQ,CAAG3B,WAAW,CAAC,CAAC,CAE9BD,SAAS,CAAC,IAAM,CACd,GAAI,CAAC6B,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAE,CACnCF,QAAQ,CAAC,GAAG,CAAC,CACf,CACF,CAAC,CAAE,CAACA,QAAQ,CAAC,CAAC,CAEd5B,SAAS,CAAC,IAAM,CACd+B,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,EAAE,CAAC,CAAE;AAER,KAAM,CAAAA,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,iBAAiB,CAAE,CAC9CC,MAAM,CAAE,KACV,CAAC,CAAC,CAEF,GAAIF,QAAQ,CAACG,EAAE,CAAE,CACf,KAAM,CAAAC,YAAY,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAC1CtB,OAAO,CAACqB,YAAY,CAACtB,IAAI,CAAC,CAC1BG,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,IAAM,CACLqB,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAEP,QAAQ,CAACQ,UAAU,CAAC,CAC5D,CACF,CAAE,MAAOD,KAAK,CAAE,CACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC9C,CACF,CAAC,CAED,KAAM,CAAAE,WAAW,CAAGA,CAAA,GAAM,CACxBC,MAAM,CAACpC,KAAK,CAAC,CAAC,CAChB,CAAC,CAED,KAAM,CAAAqC,IAAI,CAAGA,CAAA,GAAM,CACjBf,QAAQ,CAAC,gBAAgB,CAAC,CAC5B,CAAC,CAED,KAAM,CAAAgB,YAAY,CAAIC,EAAE,EAAK,CAC3B1B,WAAW,CAAC0B,EAAE,CAAC,CACf,KAAM,CAAAC,YAAY,CAAGhC,IAAI,CAACiC,IAAI,CAAEC,IAAI,EAAKA,IAAI,CAACC,GAAG,GAAKJ,EAAE,CAAC,CACzDxB,aAAa,CAAC,CACZC,QAAQ,CAAEwB,YAAY,CAACxB,QAAQ,CAC/BC,KAAK,CAAEuB,YAAY,CAACvB,KAAK,CACzBC,KAAK,CAAEsB,YAAY,CAACtB,KAAK,CACzBC,SAAS,CAAEqB,YAAY,CAACrB,SAC1B,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAAyB,YAAY,CAAGA,CAAA,GAAM,CACzB/B,WAAW,CAAC,IAAI,CAAC,CACjBE,aAAa,CAAC,CACZC,QAAQ,CAAE,EAAE,CACZC,KAAK,CAAE,EAAE,CACTC,KAAK,CAAE,EAAE,CACTC,SAAS,CAAE,EACb,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAA0B,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CACrC,GAAI,CACF,KAAM,CAAAnB,QAAQ,CAAG,KAAM,CAAAC,KAAK,oBAAAmB,MAAA,CAAoBlC,QAAQ,EAAI,CAC1DgB,MAAM,CAAE,OAAO,CACfmB,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACpC,UAAU,CACjC,CAAC,CAAC,CAEF,GAAIY,QAAQ,CAACG,EAAE,CAAE,CACf;AACAJ,SAAS,CAAC,CAAC,CAEX;AACAmB,YAAY,CAAC,CAAC,CAChB,CAAC,IAAM,CACLZ,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAEP,QAAQ,CAACQ,UAAU,CAAC,CAC5D,CACF,CAAE,MAAOD,KAAK,CAAE,CACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC9C,CACF,CAAC,CAED;AACA,KAAM,CAAAkB,YAAY,CAAG3C,IAAI,CAAC4C,MAAM,CAAEV,IAAI,EAAK,CACzC;AACA,KAAM,CAAAW,UAAU,CAAG,GAAI,CAAAC,IAAI,CAAClC,WAAW,CAAC,CACxC,GAAI,CAACmC,KAAK,CAACF,UAAU,CAACG,OAAO,CAAC,CAAC,CAAC,CAAE,CAChC,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAH,IAAI,CAACZ,IAAI,CAACvB,SAAS,CAAC,CACzC;AACA,MAAO,CAAAsC,QAAQ,CAACC,YAAY,CAAC,CAAC,GAAKL,UAAU,CAACK,YAAY,CAAC,CAAC,CAC9D,CACA;AACA,MAAO,CAAAC,MAAM,CAACC,MAAM,CAAClB,IAAI,CAAC,CAACmB,IAAI,CAC5BC,KAAK,EACJ,MAAO,CAAAA,KAAK,GAAK,QAAQ,EACzBA,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC5C,WAAW,CAAC2C,WAAW,CAAC,CAAC,CAC1D,CAAC,CACH,CAAC,CAAC,CAEF,mBACE3D,KAAA,QAAA6D,QAAA,eACE/D,IAAA,OAAA+D,QAAA,cACE7D,KAAA,QAAK8D,SAAS,CAAC,QAAQ,CAAAD,QAAA,eACrB/D,IAAA,CAACN,IAAI,EAACuE,EAAE,CAAC,QAAQ,CAAAF,QAAA,cACf/D,IAAA,MAAA+D,QAAA,cACE/D,IAAA,QACEgE,SAAS,CAAC,UAAU,CACpBE,GAAG,CAAErE,IAAK,CACVsE,MAAM,CAAC,IAAI,CACXC,KAAK,CAAC,IAAI,CACVC,GAAG,CAAC,MAAM,CACX,CAAC,CACD,CAAC,CACA,CAAC,cACPrE,IAAA,CAACN,IAAI,EAACuE,EAAE,CAAC,OAAO,CAACD,SAAS,CAAC,UAAU,CAAAD,QAAA,cACnC/D,IAAA,MAAA+D,QAAA,CAAG,MAAI,CAAG,CAAC,CACP,CAAC,cACP/D,IAAA,CAACN,IAAI,EAACuE,EAAE,CAAC,gBAAgB,CAACD,SAAS,CAAC,UAAU,CAAAD,QAAA,cAC5C/D,IAAA,MAAA+D,QAAA,CAAG,OAAK,CAAG,CAAC,CACR,CAAC,cAEP/D,IAAA,CAACN,IAAI,EAACuE,EAAE,CAAC,OAAO,CAACD,SAAS,CAAC,EAAE,CAAAD,QAAA,cAC3B/D,IAAA,WAAQgE,SAAS,CAAC,OAAO,CAACM,OAAO,CAAErC,WAAY,CAAA8B,QAAA,cAC7C/D,IAAA,QACEgE,SAAS,CAAC,YAAY,CACtBE,GAAG,CAAEpE,KAAM,CACXqE,MAAM,CAAC,IAAI,CACXC,KAAK,CAAC,IAAI,CACVC,GAAG,CAAC,QAAQ,CACb,CAAC,CACI,CAAC,CACL,CAAC,EACJ,CAAC,CACJ,CAAC,cAELrE,IAAA,MAAA+D,QAAA,cACE/D,IAAA,OAAIgE,SAAS,CAAC,cAAc,CAAAD,QAAA,CAAC,oBAAkB,CAAI,CAAC,CACnD,CAAC,cAEJ7D,KAAA,QAAK8D,SAAS,CAAC,cAAc,CAACO,KAAK,CAAE,CAAEC,QAAQ,CAAE,UAAW,CAAE,CAAAT,QAAA,eAC5D/D,IAAA,UACEgE,SAAS,CAAC,cAAc,CACxBS,IAAI,CAAC,MAAM,CACXC,WAAW,CAAC,WAAW,CACvBd,KAAK,CAAE1C,WAAY,CACnByD,QAAQ,CAAGC,CAAC,EAAKzD,cAAc,CAACyD,CAAC,CAACC,MAAM,CAACjB,KAAK,CAAE,CAChDW,KAAK,CAAE,CAAEO,YAAY,CAAE,MAAO,CAAG;AAAA,CAClC,CAAC,cACF9E,IAAA,QACE+E,KAAK,CAAC,4BAA4B,CAClCX,KAAK,CAAC,IAAI,CACVD,MAAM,CAAC,IAAI,CACXa,IAAI,CAAC,cAAc,CACnBhB,SAAS,CAAC,cAAc,CACxBiB,OAAO,CAAC,WAAW,CACnBV,KAAK,CAAE,CACLC,QAAQ,CAAE,UAAU,CACpBU,KAAK,CAAE,MAAM,CACbC,GAAG,CAAE,KAAK,CACVC,SAAS,CAAE,kBACb,CAAE,CAAArB,QAAA,cAEF/D,IAAA,SAAMqF,CAAC,CAAC,2KAA2K,CAAE,CAAC,CACnL,CAAC,EACH,CAAC,CAGLnE,WAAW,EAAI+B,YAAY,CAACqC,MAAM,CAAG,CAAC,eACrCpF,KAAA,QAAK8D,SAAS,CAAC,oBAAoB,CAAAD,QAAA,eACjC/D,IAAA,CAACJ,cAAc,GAAE,CAAC,cAElBM,KAAA,UAAO8D,SAAS,CAAC,YAAY,CAAAD,QAAA,eAC3B/D,IAAA,UAAA+D,QAAA,cACE7D,KAAA,OAAA6D,QAAA,eACE/D,IAAA,OAAA+D,QAAA,CAAI,IAAE,CAAI,CAAC,cACX/D,IAAA,OAAA+D,QAAA,CAAI,SAAO,CAAI,CAAC,cAChB/D,IAAA,OAAA+D,QAAA,CAAI,UAAQ,CAAI,CAAC,cACjB/D,IAAA,OAAA+D,QAAA,CAAI,OAAK,CAAI,CAAC,cACd/D,IAAA,OAAA+D,QAAA,CAAI,OAAK,CAAI,CAAC,cACd/D,IAAA,OAAA+D,QAAA,CAAI,WAAS,CAAI,CAAC,cAClB/D,IAAA,OAAA+D,QAAA,CAAI,SAAO,CAAI,CAAC,EACd,CAAC,CACA,CAAC,cACR/D,IAAA,UAAA+D,QAAA,CACGd,YAAY,CAACsC,GAAG,CAAEC,CAAC,eAClBtF,KAAA,OAAA6D,QAAA,eACE/D,IAAA,OAAA+D,QAAA,CAAKyB,CAAC,CAAC/C,GAAG,CAAK,CAAC,cAChBzC,IAAA,OAAA+D,QAAA,CAAKyB,CAAC,CAACC,OAAO,CAAK,CAAC,cACpBzF,IAAA,OAAA+D,QAAA,CACGrD,QAAQ,GAAK8E,CAAC,CAAC/C,GAAG,cACjBzC,IAAA,UACEyE,IAAI,CAAC,MAAM,CACXC,WAAW,CAAEc,CAAC,CAAC1E,QAAS,CACxB8C,KAAK,CAAEhD,UAAU,CAACE,QAAS,CAC3B6D,QAAQ,CAAGC,CAAC,EACV/D,aAAa,CAAC,CACZ,GAAGD,UAAU,CACbE,QAAQ,CAAE8D,CAAC,CAACC,MAAM,CAACjB,KACrB,CAAC,CACF,CACF,CAAC,CAEF4B,CAAC,CAAC1E,QACH,CACC,CAAC,cACLd,IAAA,OAAA+D,QAAA,CACGrD,QAAQ,GAAK8E,CAAC,CAAC/C,GAAG,cACjBzC,IAAA,UACEyE,IAAI,CAAC,MAAM,CACXC,WAAW,CAAEc,CAAC,CAACzE,KAAM,CACrB6C,KAAK,CAAEhD,UAAU,CAACG,KAAM,CACxB4D,QAAQ,CAAGC,CAAC,EACV/D,aAAa,CAAC,CACZ,GAAGD,UAAU,CACbG,KAAK,CAAE6D,CAAC,CAACC,MAAM,CAACjB,KAClB,CAAC,CACF,CACF,CAAC,CAEF4B,CAAC,CAACzE,KACH,CACC,CAAC,cACLf,IAAA,OAAA+D,QAAA,CACGrD,QAAQ,GAAK8E,CAAC,CAAC/C,GAAG,cACjBzC,IAAA,UACEyE,IAAI,CAAC,MAAM,CACXC,WAAW,CAAEc,CAAC,CAACxE,KAAM,CACrB4C,KAAK,CAAEhD,UAAU,CAACI,KAAM,CACxB2D,QAAQ,CAAGC,CAAC,EACV/D,aAAa,CAAC,CACZ,GAAGD,UAAU,CACbI,KAAK,CAAE4D,CAAC,CAACC,MAAM,CAACjB,KAClB,CAAC,CACF,CACF,CAAC,CAEF4B,CAAC,CAACxE,KACH,CACC,CAAC,cACLhB,IAAA,OAAA+D,QAAA,CACGrD,QAAQ,GAAK8E,CAAC,CAAC/C,GAAG,cACjBzC,IAAA,UACEyE,IAAI,CAAC,MAAM,CACXC,WAAW,CAAEc,CAAC,CAACvE,SAAU,CACzB2C,KAAK,CAAEhD,UAAU,CAACK,SAAU,CAC5B0D,QAAQ,CAAGC,CAAC,EACV/D,aAAa,CAAC,CACZ,GAAGD,UAAU,CACbK,SAAS,CAAE2D,CAAC,CAACC,MAAM,CAACjB,KACtB,CAAC,CACF,CACF,CAAC,CAEF4B,CAAC,CAACvE,SACH,CACC,CAAC,cACLjB,IAAA,OAAA+D,QAAA,CACGrD,QAAQ,GAAK8E,CAAC,CAAC/C,GAAG,cACjBvC,KAAA,CAAAE,SAAA,EAAA2D,QAAA,eACE/D,IAAA,WACEgE,SAAS,CAAC,YAAY,CACtBM,OAAO,CAAE3B,kBAAmB,CAAAoB,QAAA,CAC7B,MAED,CAAQ,CAAC,cACT/D,IAAA,WAAQgE,SAAS,CAAC,YAAY,CAACM,OAAO,CAAE5B,YAAa,CAAAqB,QAAA,CAAC,QAEtD,CAAQ,CAAC,EACT,CAAC,cAEH/D,IAAA,WACEgE,SAAS,CAAC,QAAQ,CAClBM,OAAO,CAAEA,CAAA,GAAMlC,YAAY,CAACoD,CAAC,CAAC/C,GAAG,CAAE,CAAAsB,QAAA,CACpC,QAED,CAAQ,CACT,CACC,CAAC,GA5FEyB,CAAC,CAAC/C,GA6FP,CACL,CAAC,CACG,CAAC,EACH,CAAC,EACL,CACN,CAGAvB,WAAW,EAAI+B,YAAY,CAACqC,MAAM,GAAK,CAAC,eAAItF,IAAA,MAAA+D,QAAA,CAAG,mBAAiB,CAAG,CAAC,CAGpEvD,OAAO,eACNN,KAAA,MAAG8D,SAAS,CAAC,UAAU,CAAAD,QAAA,EAAC,6BACK,cAAA/D,IAAA,MAAGgE,SAAS,CAAC,oBAAoB,CAAI,CAAC,EAChE,CACJ,EACE,CAAC,CAEV,CAAC,CAED,cAAe,CAAA3D,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}